






local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local mouse = LocalPlayer:GetMouse()

local circleRadius = 20  -- The radius of the 2D circle
local circleColor = Color3.fromRGB(255, 0, 0)  -- Color of the circle (red)
local circleTransparency = 0.5  -- Transparency of the circle

local targetPlayer = nil  -- Store the player that is currently selected
local isLocking = false  -- Whether the camera and mouse are locked

-- Create a ScreenGui to hold the circle
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Create a frame to represent the 2D circle around the mouse
local circleFrame = Instance.new("Frame")
circleFrame.Size = UDim2.new(0, circleRadius * 2, 0, circleRadius * 2)
circleFrame.AnchorPoint = Vector2.new(0.5, 0.5)  -- Center the circle on the mouse position
circleFrame.BackgroundColor3 = circleColor
circleFrame.BackgroundTransparency = circleTransparency
circleFrame.BorderSizePixel = 0
circleFrame.Parent = screenGui

-- Update the position of the circle to follow the mouse
local function updateCirclePosition()
    local mousePos = mouse.Hit.p
    circleFrame.Position = UDim2.new(0, mouse.X, 0, mouse.Y)
end

-- Lock the camera to the selected player's head (rotates the camera)
local function lockCameraToPlayer(player)
    if player and player.Character then
        local head = player.Character:FindFirstChild("Head")
        if head then
            -- Keep the camera locked to your character's position, but rotate it to face the selected player
            Camera.CameraType = Enum.CameraType.Scriptable
            local charPos = LocalPlayer.Character.HumanoidRootPart.Position
            Camera.CFrame = CFrame.new(charPos + Vector3.new(0, 5, 10), head.Position)
        end
    end
end

-- Unlock the camera and reset it back to default
local function unlockCamera()
    Camera.CameraType = Enum.CameraType.Custom
end

-- Check if the mouse is over a player within the circle
local function checkMouseOverPlayer()
    local closestPlayer = nil
    local shortestDistance = circleRadius  -- Limit the distance to the circle's radius

    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player ~= LocalPlayer then
            local character = player.Character
            local head = character:FindFirstChild("Head")
            if head then
                local distance = (head.Position - mouse.Hit.p).Magnitude
                if distance <= circleRadius and distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end
    return closestPlayer
end

-- Listen for T key press to lock or unlock the camera
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.T then
        -- Check if we clicked on a player inside the circle
        if not isLocking then
            targetPlayer = checkMouseOverPlayer()
            if targetPlayer then
                isLocking = true
                lockCameraToPlayer(targetPlayer)
            end
        else
            isLocking = false
            unlockCamera()
        end
    end
end)

-- Update the circle's position on each frame
game:GetService("RunService").Heartbeat:Connect(function()
    updateCirclePosition()

    -- Keep locking camera if the mouse is held
    if isLocking and targetPlayer then
        lockCameraToPlayer(targetPlayer)
    end
end)
